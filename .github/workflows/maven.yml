name: Twitter API CI/CD Demo

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
          # Log in to Docker Hub

    # Build the application and package it as a JAR file
    - name: Build with Maven
      run: mvn clean package -DskipTests

    # Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Build the Docker image
    - name: Build Docker Image
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/twitter-api-demo:${{ github.sha }} .

    # Push the Docker image to Docker Hub
    - name: Push Docker Image to Docker Hub
      run: docker push ${{ secrets.DOCKER_USERNAME }}/twitter-api-demo:${{ github.sha }}

    # (Optional) Tag the image with `latest` and push again
    - name: Tag Docker Image as latest
      run: |
        docker tag ${{ secrets.DOCKER_USERNAME }}/twitter-api-demo:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/twitter-api-demo:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/twitter-api-demo:latest
      
    - name: Upload SBOM(Cyclonedx)
      uses: actions/upload-artifact@v3
      with:
        name: bom.json
        path: './target/bom.json'
      
  scan:
    name: Scan dependencies with Trivy
    needs: build
    runs-on: ubuntu-latest
    steps:
    # Step 1: Run Trivy in GitHub for Dependency Graph
    - name: Run Trivy in GitHub SBOM mode and submit results to Dependency Graph
      uses: aquasecurity/trivy-action@0.28.0
      with:
        scan-type: 'fs'
        format: 'github'
        output: 'dependency-results.sbom.json'
        image-ref: '.'
        github-pat: ${{ secrets.GITHUB_TOKEN }}

    # Step 5: Run Trivy SBOM Scan on the source files
    - name: Trivy SBOM Scan (SPDX Format)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'spdx-json'
        output: 'reports/sbom-spdx.json'

    # Step 6: Run Trivy Docker Image Vulnerability Scan
    - name: Trivy Docker Image Scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'image'
        image-ref: "${{ secrets.DOCKER_USERNAME }}/twitter-api-demo:latest"
        format: 'table'
        severity: 'CRITICAL,HIGH'
        ignore-unfixed: true
        output: 'reports/docker-scan-report.txt'

    # Step 7: Upload reports as artifacts
    - name: Upload SBOM and Docker Scan Report
      uses: actions/upload-artifact@v3
      with:
        name: scan-reports
        path: reports/  

